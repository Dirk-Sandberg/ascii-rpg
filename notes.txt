Map button brings map overlay, causes text fields opacity to go to 0.1
Text log sets [color] to make opacity fade
discoverable map - use compass directions to navigate
Sacrifice health for luck
Craft spells to create random combinations
ASCII Art archive: https://www.asciiart.eu/weapons/swords

Have people choose one trait from a random group every level
    Progression at the dungeon level
Unlocking new traits every 10 floors
    Progression at the meta level

classes - UNLOCKABLE - CHOOSE 2 - CHOOSE ONE PER LEVEL
    Vampire
    Crit spellcaster
    Crit melee
    Perceptive (find good items)
    LuckMaker (deal random additional damage)
    Alchemist ()
    Beefy (triple hp)
    Heavy (damage scales with hp)
    Transformer (Ignore negative elemental effects during offense)
    Brute (ignore negative elemental effects during defense)
    Elementalist (convert weapon element types)
    Bloodthirster (high dmg at low hp)
    Bloodspiller (high dmg at high hp)
    Conquerer (Gain double stats at each level)
    Acrolyte (Craft additional spells)
    Poisoner (Consecutive melee attacks deal increasing damage)
    Thrasher (Ignore melee armor)
    Wisher (damage is randomized between 1 and 2x damage)
    Balance (Can dual wield weapons)
    Molten (Double fire bonus)
    Subzero (Double ice bonus)
    Tranquil (Double nature bonus)

def calculate_damage():
    damage_dealt = player.damage
    damage_taken = monster.damage
    for trait in classes:
        damage_dealt = trait.modify_damage_dealt(damage_dealt, player)

    for trait in classes
        damage_taken = trait.modify_damage_taken(damage_taken, damage_dealt, player)

class Thrasher():
    def modify_damage_dealt():
        damage_dealt *= monster.defense
        ** MAKE MONSTER DEFENSE MULTIPLICATIVE, NOT ADDITIVE **
        # If allowed to reorder, this could be either really good or really bad
class Poisoner():
    def modify_damage_dealt(damage_dealt, player, turn_counter):
         damage_dealt += player.level * turn_counter
         return damage_dealt

class BloodthirsterTrait:
    def modify_damage_dealt(self, damage_dealt, player):
        damage_dealt = damage_dealt * player.percent_hp

class VampireTrait:
    def modify_damage_taken(self, damage_taken, damage_dealt, player):
        damage_taken = damage_taken - damage_dealt/lifesteal_factor
